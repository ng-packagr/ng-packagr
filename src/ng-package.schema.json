{
  "$schema": "http://json-schema.org/schema",
  "id": "https://github.com/dherges/ng-packagr/blob/master/src/ng-package.schema.json",
  "title": "NgPackageConfig",
  "description": "JSON Schema for `ng-package.json` description file",
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string"
    },
    "dest": {
      "description":
        "Destination folder where distributable binaries of the Angular library are written (default: `dist`).",
      "type": "string",
      "default": "dist"
    },
    "workingDirectory": {
      "description":
        "Internal working directory of ng-packagr where intermediate build files are stored (default: `.ng_pkg_build`).",
      "type": "string",
      "default": ".ng_pkg_build"
    },
    "lib": {
      "description": "Description of the library's entry point.",
      "type": "object",
      "properties": {
        "entryFile": {
          "description": "Entry file to the public API (default: `src/public_api.ts`).",
          "type": "string",
          "default": "src/public_api.ts"
        },
        "flatModuleFile": {
          "description":
            "Filename of the auto-generated flat module file (if empty, defaults to the package name as given in `package.json`).",
          "type": "string",
          "default": ""
        },
        "embedded": {
          "description": "An array of external dependencies that will be embedded in the final bundle.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "umdModuleIds": {
          "description":
            "A map of external dependencies and their correspondent UMD module identifiers. Map keys are TypeScript / EcmaScript module identifiers. Map values are UMD module ids. The purpose of this map is to correctly bundle an UMD module file (with `rollup`). By default, `rxjs`, `tslib` and `@angular/*` dependency symbols are supported.",
          "type": "object",
          "additionalProperties": true
        },
        "jsx": {
          "description":
            "A property to indicate whether your library is going to be bundling jsx/tsx files. This passes through to tsconfig - see https://www.typescriptlang.org/docs/handbook/jsx.html",
          "type": "string",
          "enum": ["preserve", "react", "react-native", ""],
          "default": ""
        },
        "cssUrl": {
          "description": "Embed assets in css file using data URIs - see https://css-tricks.com/data-uris",
          "type": "string",
          "enum": ["none", "inline"],
          "default": "none"
        },
        "sassIncludePaths": {
          "description": "Any additional paths that should used to resolve SASS imports",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "languageLevel": {
          "description":
            "Set typescript language level, i.e. tsconfig.lib. This will enable accessing typescript features available in es2016, es2017, etc.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": ["dom", "es2015"]
        }
      }
    },
    "rollup": {
      "description": "Options passed through to Rollup",
      "type": "object",
      "properties": {
        "nodeResolve": {
          "description": "Options passed through to rollup-plugin-node-resolve",
          "type": "object",
          "properties": {
            "module": {
              "description": "use 'module' field for ES6 module if possible",
              "type": "boolean",
              "default": true
            },
            "jsnext": {
              "description": "use 'jsnext:main' if possible – see https://github.com/rollup/rollup/wiki/jsnext:main",
              "type": "boolean",
              "default": false
            },
            "main": {
              "description":
                "// use 'main' field or index.js, even if it's not an ES6 module (needs to be converted from CommonJS to ES6 – see https://github.com/rollup/rollup-plugin-commonjs",
              "type": "boolean",
              "default": true
            },
            "browser": {
              "description":
                "some package.json files have a `browser` field which specifies alternative files to load for people bundling for the browser.",
              "type": "boolean",
              "default": false
            },
            "extensions": {
              "description": "when not all files you want to resolve are .js files",
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [".js"]
            },
            "preferBuiltins": {
              "description": "whether to prefer built-in modules (e.g. `fs`, `path`) or local ones with the same names",
              "type": "boolean",
              "default": true
            },
            "jail": {
              "description":
                "Lock the module search in this path (like a chroot). Module defined outside this path will be mark has external",
              "type": "string",
              "default": "/"
            },
            "modulesOnly": {
              "description": "If true, inspect resolved files to check that they are ES2015 modules",
              "type": "boolean",
              "default": false
            }
          }
        }
      }
    }
  },
  "required": [],
  "additionalProperties": false
}
